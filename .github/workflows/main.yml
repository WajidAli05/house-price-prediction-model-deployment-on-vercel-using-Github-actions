name: CI/CD Pipeline for House Price Prediction

# Trigger workflow on push to dev, staging, or main branches, or on pull requests
on:
  push:
    branches:
      - main
      - dev
      - staging
  pull_request:
    branches:
      - main
      - dev
      - staging

jobs:
  # Job 1: Linting and Static Code Analysis
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8

      - name: Run Linting
        run: flake8 --max-line-length=120 .

  # Job 2: Run Unit Tests
  unit-tests:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Unit Tests
        run: python -m unittest discover -s tests

  # Job 3: Build Docker Image for Environment Parity
  build-docker:
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build Docker image
        run: |
          docker build -t house-price-prediction-api .

  # Job 4: Deploy to Vercel (Development)
  deploy-dev:
    runs-on: ubuntu-latest
    needs: build-docker
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Deploy to Vercel (Development)
        run: vercel --token ${{ secrets.VERCEL_TOKEN }} --prod --scope ${{ secrets.VERCEL_SCOPE }} --env NODE_ENV=development
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_SCOPE: ${{ secrets.VERCEL_SCOPE }}
        if: github.ref == 'refs/heads/dev'

  # Job 5: Deploy to Vercel (Staging)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: deploy-dev
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Deploy to Vercel (Staging)
        run: vercel --token ${{ secrets.VERCEL_TOKEN }} --prod --scope ${{ secrets.VERCEL_SCOPE }} --env NODE_ENV=staging
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_SCOPE: ${{ secrets.VERCEL_SCOPE }}
        if: github.ref == 'refs/heads/staging'

  # Job 6: Deploy to Vercel (Production)
  deploy-prod:
    runs-on: ubuntu-latest
    needs: deploy-staging
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Deploy to Vercel (Production)
        run: vercel --token ${{ secrets.VERCEL_TOKEN }} --prod --scope ${{ secrets.VERCEL_SCOPE }} --env NODE_ENV=production
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_SCOPE: ${{ secrets.VERCEL_SCOPE }}
        if: github.ref == 'refs/heads/main'
